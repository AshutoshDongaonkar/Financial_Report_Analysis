import asyncio
from datetime import datetime
from autogen_core import SingleThreadedAgentRuntime, AgentType, default_subscription, TypeSubscription
from agents import PriceFetcherAgent, AnalyzerAgent, ReportGeneratorAgent, ManagerAgent
from registered_messages import FetchTick
from autogen_core import AgentId
from autogen_core import TopicId
from autogen_agentchat.messages import StructuredMessage
from constants import STOCK_UPDATE_TOPIC
import logging
log = logging.getLogger(__name__)
#import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

#STOCK_UPDATE_TOPIC = TopicId(type="stock_updates", source="nse_bse_feed")
async def periodic_tick(runtime: SingleThreadedAgentRuntime, interval_seconds=15):
    while True:
        tick_payload = FetchTick(timestamp=datetime.now())
        tick_message = StructuredMessage[FetchTick](content=tick_payload, source="timer")
        await runtime.publish_message(message=tick_message, topic_id=STOCK_UPDATE_TOPIC)
        log.info(f"Published tick message to topic: {STOCK_UPDATE_TOPIC.type}")
        await asyncio.sleep(interval_seconds)

async def main():

    runtime = SingleThreadedAgentRuntime()

    # 1. Create agent instances statically
    fetcher = PriceFetcherAgent(
        stock_list=["INFY", "TCS"],
        description="Fetches real-time stock prices from NSE and BSE."
    )
    analyzer = AnalyzerAgent(
        description="Analyzes stock data for arbitrage opportunities."
    )
    reporter = ReportGeneratorAgent(
        description="Generates daily or weekly stock market reports."
    )
    manager = ManagerAgent(
        email="ashu_don@hotmail.com",
        description="Approves or rejects financial reports generated by other agents."
    )

    # 2. Define AgentId objects for static registration
    fetcher_id = AgentId(type=AgentType("price_fetcher"), key="default")
    analyzer_id = AgentId(type=AgentType("arbitrage_analyzer"), key="default")
    reporter_id = AgentId(type=AgentType("reporting_agent"), key="default")
    manager_id = AgentId(type=AgentType("human_approver"), key="default")

    # 3. Call register_instance() on the agent *instances*
    await runtime.register_agent_instance(fetcher, agent_id=fetcher_id)
    await runtime.register_agent_instance(analyzer, agent_id=analyzer_id)
    await runtime.register_agent_instance(reporter, agent_id=reporter_id)
    await runtime.register_agent_instance(manager, agent_id=manager_id)

    # 4. Explicitly register subscriptions with the runtime
    # Map the topic type to the agent type
    await runtime.add_subscription(
        InstanceSubscription(topic_type=STOCK_UPDATE_TOPIC.type, agent_type=fetcher_id.type)
    )
    # Add subscription for the analyzer agent type
    await runtime.add_subscription(
        InstanceSubscription(topic_type=STOCK_UPDATE_TOPIC.type, agent_type=analyzer_id.type)
    )
    # Add subscription for the analyzer agent type
    await runtime.add_subscription(
        InstanceSubscription(topic_type=STOCK_UPDATE_TOPIC.type, agent_type=reporter_id.type)
    )
    # Add subscription for the analyzer agent type
    await runtime.add_subscription(
        InstanceSubscription(topic_type=STOCK_UPDATE_TOPIC.type, agent_type=manager_id.type)
    )
    all_subscriptions = runtime.get_subscriptions()
    logging.info(f"Registered subscriptions: {all_subscriptions}")

    # 4. Start the runtime
    runtime.start()

    # 5. Start the periodic task
    await asyncio.create_task(periodic_tick(runtime, interval_seconds=15))

    # 6. Keep the runtime alive
    await runtime.stop_when_idle()

if __name__ == "__main__":
    asyncio.run(main(), debug=True)